<?php

/**
 * @file
 * Contains ox_core.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\erp_connect\tiny\TinyERPService;
use Drupal\Core\Site\Settings;
use Drupal\commerce_product\Entity\ProductVariationInterface;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\commerce_product\Entity\Product;

/**
 * Implements hook_help().
 */
function erp_connect_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the erp_connect module.
    case 'help.page.erp_connect':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module to integrate Drupal with ERPs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_user_insert user().
 */
function erp_connect_user_insert($account) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

  $contact = new StdClass();
  $contact->sequencia = $account->get('uid')->value;
  $contact->codigo = $account->get('uuid')->value;
  $contact->nome = $account->get('name')->value;
  $contact->tipo_pessoa = strlen($contact->cpf_cnpj) == 11 ? 'F' : 'J';
  $contact->email = $account->get('mail')->value;
  $contact->situacao = 'A';

  foreach ($tinySettings['user_fields'] as $fieldName => $field) {
    if ($account->get($fieldName)->value != "") {
      $contact->$field = $account->get($fieldName)->value;
    }
  }

  $contact->tipos_contato = [];

  foreach ($account->getRoles() as $key => $type) {
    if ($tinySettings['roles'][$type]) {
      $userType = new StdClass();
      $userType->tipo = $tinySettings['roles'][$type];
      $contact->tipos_contato[] = $userType;
    }
  }

  $contacts = '{
    "contatos": [
    {
        "contato": ' . json_encode($contact) . '
    }]
  }';

  try {
      $tinyERP->createContact($contacts);
  }
  catch (\Exception $ex) {
      watchdog_exception('erp_connect',$ex);
  }
}

/**
 * Implements hook_user_update user().
 */
function erp_connect_user_update($account) {
    $tinySettings = Settings::get('tiny');
    $tinyERP = new TinyERPService($tinySettings['token']);

    $contact = '{
  "contatos": [
    {
      "contato": {
        "sequencia": "1",
        "codigo": "1235",
        "nome": "Contato Teste 2",
        "tipo_pessoa": "F",
        "cpf_cnpj": "22755777850",
        "ie": "",
        "rg": "1234567890",
        "im": "",
        "tipos_contato": [{
          "tipo": "Cliente"
        }],
        "tipo_negocio": "",
        "endereco": "Rua Teste",
        "numero": "123",
        "complemento": "sala 2",
        "bairro": "Teste",
        "cep": "95700-000",
        "cidade": "Bento Gonçalves",
        "uf": "RS",
        "pais": "",
        "contatos": "Contato Teste",
        "fone": "(54) 3055 3808",
        "fax": "",
        "celular": "",
        "email": "teste@teste.com.br",
        "situacao": "A",
        "obs": "teste de obs"
      }
    }
  ]
}';

    $tinyERP->createContact($contact);
}


/**
 * Implements hook_ENTITY_TYPE_insert to get add product.
 */
function erp_connect_commerce_product_variation_insert(ProductVariationInterface $productVariation) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

  $product = new StdClass();
  $product->sequencia = $productVariation->get('variation_id')->value;
  $product->codigo = $productVariation->getSku();
  $product->nome = $productVariation->getTitle();
  $product->unidade = 'Pç';
  $product->preco = $productVariation->getPrice()->getNumber();
  $product->origem = '0';
  $product->situacao = 'A';
  $product->tipo = 'P';

  $products = '{
    "produtos": [
    {
        "produto": ' . json_encode($product) . '
    }]
  }';

  try {
    $response = $tinyERP->createProduct($products);
  }
  catch (\Exception $ex) {
    watchdog_exception('erp_connect',$ex);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert to get add product.
 */
function erp_connect_commerce_product_insert(ProductInterface $product) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

  foreach ($tinySettings['product_fields'] as $fieldName => $fieldERP) {
    $field = $product->getProduct()->get($fieldName);
    if ($field && $field->value != "") {
      $product->$fieldERP = $field->value;
    }
  }
}