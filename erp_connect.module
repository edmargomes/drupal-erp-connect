<?php

/**
 * @file
 * Contains erp_connect.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\erp_connect\tiny\TinyERPService;
use Drupal\erp_connect\tiny\DrupalToTiny;
use Drupal\Core\Site\Settings;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\user\UserInterface;
use Drupal\profile\Entity\ProfileInterface;
use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_checkout\Entity\CheckoutFlowInterface;

/**
 * Implements hook_help().
 */
function erp_connect_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the erp_connect module.
    case 'help.page.erp_connect':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module to integrate Drupal with ERPs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_commerce_order_insert().
 */
function erp_connect_commerce_order_insert(OrderInterface $order) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);
}

/**
 * Implements hook_commerce_order_insert().
 */
function erp_connect_commerce_order_update(OrderInterface $order) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

  if($order->getState()->getValue() == 'completed') {
    
  }
}

function erp_connect_commerce_checkout_update(CheckoutFlowInterface $checkout) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);
}
/**
 * Implements hook_profile_insert().
 */
function erp_connect_profile_insert(ProfileInterface $profile) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

//  $contact = DrupalToTiny::userToContactTiny($profile, $tinySettings);
//
//  $contacts = '{
//    "contatos": [
//    {
//        "contato": ' . json_encode($contact) . '
//    }]
//  }';
//
//  try {
//    $response = $tinyERP->createContact($contacts);
//    DrupalToTiny::addTinyIdInEntity($response, $tinySettings, \Drupal\profile\Entity\Profile::class);
//  }
//  catch (\Exception $ex) {
//    watchdog_exception('erp_connect',$ex);
//  }
}

/**
 * Implements hook_profile_update().
 */
function erp_connect_profile_update(ProfileInterface $profile) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);
//  $contact = DrupalToTiny::userToContactTiny($profile, $tinySettings);
//
//  $contacts = '{
//    "contatos": [
//    {
//        "contato": ' . json_encode($contact) . '
//    }]
//  }';
//
//  try {
//    $response = $contact->id ? $tinyERP->updateContact($contacts) : $tinyERP->createContact($contacts);
//    if (!$contact->id) {
//      DrupalToTiny::addTinyIdInEntity($response, $tinySettings, \Drupal\profile\Entity\Profile::class);
//    }
//  }
//  catch (\Exception $ex) {
//    watchdog_exception('erp_connect',$ex);
//  }
}
/**
 * Implements hook_user_insert user().
 */
function erp_connect_user_insert(UserInterface $account) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

  $contact = DrupalToTiny::userToContactTiny($account, $tinySettings);

  $contacts = '{
    "contatos": [
    {
        "contato": ' . json_encode($contact) . '
    }]
  }';

  try {
    $response = $tinyERP->createContact($contacts);
    DrupalToTiny::addTinyIdInEntity($response, $tinySettings, \Drupal\user\Entity\User::class);
  }
  catch (\Exception $ex) {
    watchdog_exception('erp_connect',$ex);
  }
}

/**
 * Implements hook_user_update user().
 */
function erp_connect_user_update($account) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);
  $contact = DrupalToTiny::userToContactTiny($account, $tinySettings);

  $contacts = '{
    "contatos": [
    {
        "contato": ' . json_encode($contact) . '
    }]
  }';

  try {
    $response = $contact->id ? $tinyERP->updateContact($contacts) : $tinyERP->createContact($contacts);
    if (!$contact->id) {
      DrupalToTiny::addTinyIdInEntity($response, $tinySettings, \Drupal\user\Entity\User::class);
    }
  }
  catch (\Exception $ex) {
    watchdog_exception('erp_connect',$ex);
  }
}


/**
 * Implements hook_ENTITY_TYPE_insert to add product.
 */
function erp_connect_commerce_product_insert(ProductInterface $product) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

  $products = new StdClass();
  $products->produtos = [];
  foreach ($tinySettings['product_fields'] as $fieldName => $fieldERP) {
    foreach ($product->getVariations() as $variation) {
      $productVariation = DrupalToTiny::productToProductTiny($variation, $tinySettings);
      $field = $product->get($fieldName);
      if ($field && $field->value != "") {
        $productVariation->$fieldERP = $field->value;
      }
      $productElement = new StdClass();
      $productElement->produto = $productVariation;
      $products->produtos[] = $productElement;
    }
  }

  try {
    if (count($products->produtos)) {
      $response = $tinyERP->createProduct(json_encode($products));
      DrupalToTiny::addTinyIdInEntity($response, $tinySettings, \Drupal\commerce_product\Entity\ProductVariation::class);
    }
  }
  catch (\Exception $ex) {
    watchdog_exception('erp_connect',$ex);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update to update product.
 */
function erp_connect_commerce_product_update(ProductInterface $product) {
  $tinySettings = Settings::get('tiny');
  $tinyERP = new TinyERPService($tinySettings['token']);

  $productsUpdate = new StdClass();
  $productsUpdate->produtos = [];
  $products = new StdClass();
  $products->produtos = [];
  foreach ($tinySettings['product_fields'] as $fieldName => $fieldERP) {
    foreach ($product->getVariations() as $variation) {
      $productVariation = DrupalToTiny::productToProductTiny($variation, $tinySettings);
      $field = $product->get($fieldName);
      if ($field && $field->value != "") {
        $productVariation->$fieldERP = $field->value;
      }
      $productElement = new StdClass();
      $productElement->produto = $productVariation;
      if ($productVariation->id)
        $productsUpdate->produtos[] = $productElement;
      else
        $products->produtos[] = $productElement;
    }
  }

  try {
    if (count($productsUpdate->produtos)) {
      $response = $tinyERP->updateProduct(json_encode($productsUpdate));
    }
    if (count($products->produtos)) {
      $response = $tinyERP->createProduct(json_encode($products));
      DrupalToTiny::addTinyIdInEntity($response, $tinySettings, \Drupal\commerce_product\Entity\ProductVariation::class);
    }
  }
  catch (\Exception $ex) {
    watchdog_exception('erp_connect',$ex);
  }
}